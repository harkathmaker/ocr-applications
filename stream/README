************************
** Build Instructions **
************************

To build all files:
	make all 

To build specific file: 
	make <file_name>
	ex: make serial_stream

***********************
** Overview of Files **
***********************

options.h:
	-- Contains getopt parsing for *_stream.c files

helper.h:
	-- Contains all helper functions to run serial and parallel versions of STREAM

native_stream.c:
	-- Modified version of STREAM found: http://www.cs.virginia.edu/stream/FTP/Code/stream.c
	-- Notable modifications include:
		-- -e option for specifying export file name generating output similar to -e option of OCR STREAM 	
		   versions for easily comparing results.
		-- NUMTHREADS macro for specifying number of threads when testing multithreaded STREAM with openmp

parallel_stream.c:
	-- Parallel implementation of stream in OCR.
	-- "db_size" and "split" should be set up such that db_size % split = 0.
	-- "Split" corresponds to number of EDTs working on "split" number of data blocks.
	-- Data blocks are "broken down" by "split" number of "chunk"s.
	-- Vector operations are broken apart into separate EDTs.
	-- partial a, b, and c "arrays" each of size "chunk" and timings of size iterations are stored in EACH datablock
	   ex: db_size = 10, split = 2, chunk = 10 / 2 = 5, iterations = 3
	       So, 2 datablocks with each a, b, c array having size 5 will be created
		   instead of 1 datablock of size 10 for each a, b, c, array
		                   a                      b                          c                               
		datablock0 = [0 to (chunk - 1)] [chunk to (2 * chunk - 1)] [2 * chunk to (3 * chunk - 1)]
		datablock1 = [0 to (chunk - 1)] [chunk to (2 * chunk - 1)] [2 * chunk to (3 * chunk - 1)]
		
			            Iteration 1 Timings          Iteration 2 Timings          Iteration 3 Timings
		datablock2 = [copy1, scale1, add1, triad1, copy2, scale2, add2, triad2, copy3, scale3, add3, triad3]
		
serial_stream.c:
	-- Serial implementation of stream in OCR.
	-- Vector operations are run in a single EDT (iterEdt) in the following order: 
	   COPY --> SCALE --> ADD --> TRIAD

- e | --export files:
	Timing data is reported in the following format:
	
	Data block size, # Iterations, Thread Count, Scalar Value, Avg Copy, Avg Scale, Avg Add, Avg Triad 
	
	*** Copy, Scale, Add, Triad values reported in MB/s
	*** In parallel_stream.c Thread Count refers to -p value
